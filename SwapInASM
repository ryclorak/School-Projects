nop
main: // not needed, but useful to identify main
  sub d,d // initialize SP to 256 (aka 0)
  dec d   // allocate for local var y
  dec d   // allocate for local var x
  ldi a,3
  st  (d),a // initialize x
  cpr c,d   // c points to x (do not increase the SP instead!)
  inc c     // c now points to y
  ldi a,7
  st  (c),a // initialize y
  dec d     // allocate for second param of swap
  st  (d),c // push address of y
  dec d     // allocate for first param of swap
  dec c     // c now points to x instead of y
  st  (d),c // push address of x
  ldi a,main_retFromSwap
  dec d
  st  (d),a // push return address
  jmpi swap // continue execution in swap
main_retFromSwap:
  inc d    // clean up after first param to swap
  inc d    // clean up after second param to swap
  // now d should point to x, d+1 points to y
  inc d    // deallocate x
  inc d    // deallocate y
  // everything is now cleaned up, d should be 0 as the stack is empty
  halt

swap:
  dec d
  t: 0					0
  retAddr: t 1 +		1
  ptr1: retAddr 1 +		2
  ptr2: ptr1 1 +		3
  
  ldi c, ptr1		//c == 2
  add c,d			//c == 2 + SP == &ptr1
  ld c,(c)			//c == *(&ptr1) == ptr1 i hope
  ld c,(c)			//c == *ptr1
  
  st (d),c			//t == *ptr1
  
  ldi c, ptr2		//c == 3
  add c, d			//c == 3 + SP == &ptr2
  ld c,(c)			//c == *(&ptr2) == ptr2
  ld c,(c)			//c == *ptr2
  
  ldi d, ptr1		//d == 2
  add d,d			//d == 2 + SP == &ptr1
  st (d),c			//d == *ptr2
  
  ldi c,t			//c == 0
  add c,d			//c == 0 + SP
  ld c,(c)			//c == *(&t) == t
  ld c,(c)			//c == *t
  
  ldi d, ptr2		//d == 3
  add d,d			//d == 3 + SP
  st(d),c			//d == *ptr1
  inc d  			//d back to where it was
  
  jmp main_retFromSwap
  
  
  
  
void swap(uint8_t *ptr1, uint8_t *ptr2)
{
  uint8_t t;
  t = *ptr1;
  *ptr1 = *ptr2;
  *ptr2 = t;
}
int main()
{
  uint8_t x,y;
  x = 3;
  y = 7;
  swap(&x, &y);
  return 0;
}
